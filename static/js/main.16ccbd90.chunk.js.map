{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","activeMarker","setActiveMarker","Map","center","zoom","zoomControl","maxZoom","LayersControl","BaseLayer","name","TileLayer","url","checked","layer","propertyName","position","inputPlaceholder","showMarker","showPopup","closeResultsOnClick","ZoomControl","zoomInTitle","zoomOutTitle","ScaleControl","markers","map","place","placeKey","CircleMarker","key","geometry","coordinates","radius","properties","color","fillColor","weight","opacity","fillOpacity","onClick","Popup","onClose","rating","API","localidad","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qzxVAOe,SAASA,IAAO,IAAD,EACYC,IAAMC,SAAS,MAD3B,mBACrBC,EADqB,KACPC,EADO,KAE5B,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,oBAAoB,YAAaC,KAAM,EAAGC,aAAe,EAAOC,QAAS,IACrF,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAcC,UAAf,CAAyBC,KAAK,OAC5B,kBAACC,EAAA,EAAD,CAAWC,IAAI,wDAEjB,kBAACJ,EAAA,EAAcC,UAAf,CAAyBI,SAAO,EAACH,KAAK,QACpC,kBAACC,EAAA,EAAD,CAAWC,IAAI,mEAEjB,kBAACJ,EAAA,EAAcC,UAAf,CAAyBC,KAAK,WAC5B,kBAACC,EAAA,EAAD,CAAWC,IAAI,oGAGnB,kBAAC,IAAD,CAAQE,MAAQ,UAAUC,aAAe,OAAOC,SAAS,WAAWC,iBAAiB,sBAAsBC,YAAY,EAAOC,WAAW,EACzIC,qBAAqB,IACrB,kBAACC,EAAA,EAAD,CAAaL,SAAS,WAAUM,YAAY,UAAUC,aAAa,WACnE,kBAACC,EAAA,EAAD,CAAcR,SAAS,gBACvB,kBAAC,IAAD,KAEIS,IAAiBC,KACb,SAACC,EAAMC,GAAP,OACE,kBAACC,EAAA,EAAD,CACEC,IAAOF,EACPxB,OAAQ,CACNuB,EAAMI,SAASC,YAAY,GAC3BL,EAAMI,SAASC,YAAY,IAE7BC,OAAQN,EAAMO,WAAWD,OACzBE,MAAQ,UACRC,UAAY,UACZC,OAAU,EACVC,QAAW,EACXC,YAAe,GACfC,QAAS,WACPtC,EAAgByB,UAS7B1B,GACC,kBAACwC,EAAA,EAAD,CACEzB,SAAU,CACRf,EAAa8B,SAASC,YAAY,GAClC/B,EAAa8B,SAASC,YAAY,IAEtCU,QAAU,WACRxC,EAAgB,QAIhB,6BACE,4BACG,WAAWD,EAAaiC,WAAWxB,KACpC,6BACC,oBAAiBT,EAAaiC,WAAWS,OAC1C,6BACC,QAAQ1C,EAAaiC,WAAWU,IACjC,6BACC,iBAAc3C,EAAaiC,WAAWW,cC3DjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.16ccbd90.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Popup, TileLayer, CircleMarker, ZoomControl, ScaleControl, LayersControl } from \"react-leaflet\";\nimport Search from \"react-leaflet-search\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport * as markers from \"./dataMarkers.json\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [activeMarker, setActiveMarker] = React.useState(null);\n  return (\n    <Map center={[25.598945999999998,-100.356308]} zoom={5} zoomControl = {false} maxZoom={40}>\n      <LayersControl>\n        <LayersControl.BaseLayer name=\"OSM\"> \n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer checked name=\"Dark\"> \n          <TileLayer url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\" />\n        </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer name=\"Terrain\"> \n          <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n        </LayersControl.BaseLayer>\n      </LayersControl>\n      <Search layer = \"markers\" propertyName = \"name\" position=\"topright\" inputPlaceholder=\"Introduzca un lugar\" showMarker={false} showPopup={false} \n      closeResultsOnClick={true} />\n      <ZoomControl position=\"topright\"zoomInTitle=\"Acercar\" zoomOutTitle=\"Alejar\"/>\n      <ScaleControl position=\"bottomright\" />\n      <MarkerClusterGroup>\n        {\n          markers.features.map(\n              (place,placeKey) => (\n                <CircleMarker\n                  key = {placeKey}\n                  center={[\n                    place.geometry.coordinates[1],\n                    place.geometry.coordinates[0]\n                  ]}\n                  radius={place.properties.radius}\n                  color = \"#FF0000\"\n                  fillColor = \"#00FA9A\"\n                  weight = {3}\n                  opacity = {1}\n                  fillOpacity = {0.7}\n                  onClick={() => {\n                    setActiveMarker(place);\n                    }\n                  }\n                />\n              )\n            )\n        }\n      </MarkerClusterGroup>\n      \n      {activeMarker && (\n        <Popup\n          position={[\n            activeMarker.geometry.coordinates[1],\n            activeMarker.geometry.coordinates[0]\n        ]}\n        onClose ={() => {\n          setActiveMarker(null);\n        }\n        }\n        >\n          <div>\n            <h4>\n              {\"Nombre: \"+activeMarker.properties.name}\n              <br/>\n              {\"Calificación: \"+activeMarker.properties.rating}\n              <br/>\n              {\"API: \"+activeMarker.properties.API}\n              <br/>\n              {\"Ubicación: \"+activeMarker.properties.localidad}\n            </h4>\n          </div>\n        </Popup>\n      )\n      }\n    </Map>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}